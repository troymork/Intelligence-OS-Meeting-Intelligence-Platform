name: Comprehensive Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'
  COVERAGE_THRESHOLD: 90

jobs:
  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [frontend, backend, voice-processor]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Python
        if: matrix.component != 'frontend'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          if [ "${{ matrix.component }}" = "frontend" ]; then
            cd src/frontend && npm ci
          elif [ "${{ matrix.component }}" = "backend" ]; then
            cd src/backend && pip install -r requirements.txt
            cd ../frontend && npm ci  # For shared test utilities
          else
            cd src/voice-processor && pip install -r requirements.txt
          fi
          
      - name: Run unit tests
        run: |
          if [ "${{ matrix.component }}" = "frontend" ]; then
            cd src/frontend && npm run test:coverage
          elif [ "${{ matrix.component }}" = "backend" ]; then
            cd src/backend && python -m pytest --cov=src --cov-report=xml --cov-report=html
          else
            cd src/voice-processor && python -m pytest --cov=. --cov-report=xml
          fi
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: |
            src/${{ matrix.component }}/coverage.xml
            src/frontend/coverage/lcov.info
          flags: ${{ matrix.component }}
          name: ${{ matrix.component }}-coverage
          
      - name: Archive test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ matrix.component }}-test-results
          path: |
            src/${{ matrix.component }}/test-results/
            src/${{ matrix.component }}/coverage/

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: intelligence_os_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          npm ci
          cd src/backend && pip install -r requirements.txt
          cd ../voice-processor && pip install -r requirements.txt
          
      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:testpassword@localhost:5432/intelligence_os_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          
      - name: Run database migrations
        run: |
          cd src/backend && python manage.py migrate --settings=settings.test
          
      - name: Start services
        run: |
          cd src/backend && python manage.py runserver --settings=settings.test &
          cd src/voice-processor && python main.py &
          sleep 10  # Wait for services to start
          
      - name: Run integration tests
        run: |
          node tests/integration/run-integration-tests.js
          
      - name: Archive integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: test-results/integration/

  # AI Model Tests
  ai-model-tests:
    name: AI Model Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          npm ci
          cd src/backend && pip install -r requirements.txt
          
      - name: Download test datasets
        run: |
          mkdir -p tests/ai/test-data
          # Download or generate test datasets
          node tests/ai/generate-test-data.js
          
      - name: Run AI model tests
        run: |
          node tests/ai/run-ai-tests.js
          
      - name: Archive AI test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ai-model-test-results
          path: test-results/ai/

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: intelligence_os_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          npm ci
          cd src/backend && pip install -r requirements.txt
          
      - name: Setup performance test environment
        run: |
          cp .env.example .env.performance
          echo "DATABASE_URL=postgresql://postgres:testpassword@localhost:5432/intelligence_os_test" >> .env.performance
          
      - name: Start services for performance testing
        run: |
          cd src/backend && python manage.py runserver --settings=settings.performance &
          sleep 15  # Wait for services to fully start
          
      - name: Run performance tests
        run: |
          node tests/performance/run-performance-tests.js
          
      - name: Archive performance test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: test-results/performance/

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: intelligence_os_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          npm ci
          cd src/backend && pip install -r requirements.txt
          npx playwright install --with-deps
          
      - name: Build frontend
        run: |
          cd src/frontend && npm run build
          
      - name: Start full application
        run: |
          cd src/backend && python manage.py runserver --settings=settings.test &
          cd src/frontend && npm run serve &
          sleep 20  # Wait for full application to start
          
      - name: Run E2E tests
        run: |
          npx playwright test --reporter=html
          
      - name: Archive E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            playwright-report/
            test-results/

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: |
          npm audit --audit-level=high
          npx audit-ci --high
          
      - name: Run SAST scan
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_PYTHON_PYLINT: true
          VALIDATE_PYTHON_BLACK: true
          
      - name: Run dependency vulnerability scan
        run: |
          npx snyk test --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Accessibility Tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps
          
      - name: Build and start application
        run: |
          cd src/frontend && npm run build && npm run serve &
          sleep 10
          
      - name: Run accessibility tests
        run: |
          npx playwright test tests/accessibility/ --reporter=html
          
      - name: Archive accessibility test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-test-results
          path: accessibility-report/

  # Comprehensive Test Report
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, ai-model-tests, performance-tests, e2e-tests, security-tests, accessibility-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download all test artifacts
        uses: actions/download-artifact@v3
        with:
          path: test-artifacts/
          
      - name: Generate comprehensive test report
        run: |
          node tests/generate-comprehensive-report.js
          
      - name: Upload comprehensive test report
        uses: actions/upload-artifact@v3
        with:
          name: comprehensive-test-report
          path: test-results/comprehensive/
          
      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = 'test-results/comprehensive/summary.md';
            
            if (fs.existsSync(path)) {
              const summary = fs.readFileSync(path, 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🧪 Test Results\n\n${summary}`
              });
            }

  # Deployment Gate
  deployment-gate:
    name: Deployment Gate
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, ai-model-tests, performance-tests, e2e-tests, security-tests, accessibility-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Check test results
        run: |
          echo "All tests passed! Ready for deployment."
          
      - name: Trigger deployment
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'deploy',
              client_payload: {
                ref: context.ref,
                sha: context.sha
              }
            });

# Workflow notifications
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test-report]
    if: always()
    
    steps:
      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ci-cd'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: Notify Slack on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#ci-cd'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}